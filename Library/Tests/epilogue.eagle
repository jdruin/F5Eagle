###############################################################################
#
# epilogue.eagle --
#
# Extensible Adaptable Generalized Logic Engine (Eagle)
# Test Epilogue Stub File
#
# Copyright (c) 2007-2012 by Joe Mistachkin.  All rights reserved.
#
# See the file "license.terms" for information on usage and redistribution of
# this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: $
#
###############################################################################

if {![info exists test_all_path]} then {
  #
  # NOTE: Build a reusable expression that can be used to verify the
  #       candidate paths.  This is done to avoid duplication of this
  #       (quite complex) expression several times (just below).
  #
  set expr {![info exists test_all_path] || ![file exists $test_all_path] \
      || ![file isdirectory $test_all_path] || ([llength [info commands \
      glob]] > 0 && [llength [glob -directory $test_all_path -types {f r} \
      -nocomplain -- *]] == 0)}

  #
  # NOTE: First, try going one directory level above this file and then
  #       looking for the "lib/Test1.0" sub-directory there.  This will
  #       be the typical "deployment" configuration, where the "Tests"
  #       and "lib" sub-directories are peers.
  #
  set test_all_path [file normalize [file join [file dirname [file \
      dirname [info script]]] lib Test1.0]]

  if {[expr $expr]} then {
    #
    # NOTE: Finally, fallback to going two directory levels above this
    #       file and looking for the "lib/Test1.0" sub-directory there.
    #       This will be the typical "development" configuration, where
    #       the "Tests" sub-directory exists inside of the "Library"
    #       project sub-directory, which itself is a peer of the "lib"
    #       sub-directory.
    #
    set test_all_path [file normalize [file join [file dirname [file \
        dirname [file dirname [info script]]]] lib Test1.0]]
  }

  unset expr
}

source [file join $test_all_path epilogue.eagle]
