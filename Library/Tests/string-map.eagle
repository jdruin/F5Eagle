###############################################################################
#
# string-map.eagle --
#
# Extensible Adaptable Generalized Logic Engine (Eagle)
#
# Copyright (c) 2007-2012 by Joe Mistachkin.  All rights reserved.
#
# See the file "license.terms" for information on usage and redistribution of
# this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: $
#
###############################################################################

source [file join [file normalize [file dirname [info script]]] prologue.eagle]

###############################################################################

runTest {test concat-1.1 {simple concatenation} {
  concat a b c d e f g
} {a b c d e f g}}

###############################################################################

runTest {test concat-1.2 {merging lists together} {
  concat a {b c d} {e f g h}
} {a b c d e f g h}}

###############################################################################

runTest {test concat-1.3 {merge lists, retain sub-lists} {
  concat a {b {c d}} {{e f}} g h
} {a b {c d} {e f} g h}}

###############################################################################

runTest {test concat-1.4 {special characters} -body {
    concat a\{ {b \{c d} \{d
} -result "a\{\ b\ \\\{c\ d\ \{d"}

###############################################################################

runTest {test concat-2.1 {error: one empty argument} {
  concat {}
} {}}

###############################################################################

runTest {test concat-3.1 {error: no arguments} -body {
  list [catch concat msg] $msg
} -cleanup {
  unset -nocomplain msg
} -result {0 {}}}

###############################################################################

runTest {test concat-4.1 {pruning off extra white space} {
  concat {} {a b c}
} {a b c}}

###############################################################################

runTest {test concat-4.2 {pruning off extra white space} {
  concat x y "  a b c	\n\t  " "   "  " def "
} {x y a b c def}}

###############################################################################

runTest {test concat-4.3 {pruning off extra white space sets length correctly} {
  llength [concat { {{a}} }]
} 1}

###############################################################################

catch {unset x0}
append x0 "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F"
append x0 "\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F"
append x0 "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F"
append x0 "\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F"
append x0 "\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F"
append x0 "\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F"
append x0 "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F"
append x0 "\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F"
append x0 "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F"
append x0 "\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F"
append x0 "\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF"
append x0 "\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"
append x0 "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
append x0 "\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF"
append x0 "\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF"
append x0 "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"

###############################################################################

runTest {test string-97.1 {string map with all byte values} -body {
  #
  # NOTE: Make sure that every byte value can be handled by [string map].
  #
  set result [list]

  for {set i 0} {$i < 256} {incr i} {
    if {[isEagle]} then {
      set c [subst \\x[string format "{0:X}" $i]]
    } else {
      set c [format %c $i]
    }

    set s $x0
    lappend result [string first $c $s]

    set s [string map [list $c ""] $s]
    lappend result [string first $c $s]
  }

  set result
} -cleanup {
  unset -nocomplain c i s result
} -result \
{0 -1 1 -1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8 -1 9 -1 10 -1 11 -1 12 -1 13 -1 14\
-1 15 -1 16 -1 17 -1 18 -1 19 -1 20 -1 21 -1 22 -1 23 -1 24 -1 25 -1 26 -1 27\
-1 28 -1 29 -1 30 -1 31 -1 32 -1 33 -1 34 -1 35 -1 36 -1 37 -1 38 -1 39 -1 40\
-1 41 -1 42 -1 43 -1 44 -1 45 -1 46 -1 47 -1 48 -1 49 -1 50 -1 51 -1 52 -1 53\
-1 54 -1 55 -1 56 -1 57 -1 58 -1 59 -1 60 -1 61 -1 62 -1 63 -1 64 -1 65 -1 66\
-1 67 -1 68 -1 69 -1 70 -1 71 -1 72 -1 73 -1 74 -1 75 -1 76 -1 77 -1 78 -1 79\
-1 80 -1 81 -1 82 -1 83 -1 84 -1 85 -1 86 -1 87 -1 88 -1 89 -1 90 -1 91 -1 92\
-1 93 -1 94 -1 95 -1 96 -1 97 -1 98 -1 99 -1 100 -1 101 -1 102 -1 103 -1 104 -1\
105 -1 106 -1 107 -1 108 -1 109 -1 110 -1 111 -1 112 -1 113 -1 114 -1 115 -1\
116 -1 117 -1 118 -1 119 -1 120 -1 121 -1 122 -1 123 -1 124 -1 125 -1 126 -1\
127 -1 128 -1 129 -1 130 -1 131 -1 132 -1 133 -1 134 -1 135 -1 136 -1 137 -1\
138 -1 139 -1 140 -1 141 -1 142 -1 143 -1 144 -1 145 -1 146 -1 147 -1 148 -1\
149 -1 150 -1 151 -1 152 -1 153 -1 154 -1 155 -1 156 -1 157 -1 158 -1 159 -1\
160 -1 161 -1 162 -1 163 -1 164 -1 165 -1 166 -1 167 -1 168 -1 169 -1 170 -1\
171 -1 172 -1 173 -1 174 -1 175 -1 176 -1 177 -1 178 -1 179 -1 180 -1 181 -1\
182 -1 183 -1 184 -1 185 -1 186 -1 187 -1 188 -1 189 -1 190 -1 191 -1 192 -1\
193 -1 194 -1 195 -1 196 -1 197 -1 198 -1 199 -1 200 -1 201 -1 202 -1 203 -1\
204 -1 205 -1 206 -1 207 -1 208 -1 209 -1 210 -1 211 -1 212 -1 213 -1 214 -1\
215 -1 216 -1 217 -1 218 -1 219 -1 220 -1 221 -1 222 -1 223 -1 224 -1 225 -1\
226 -1 227 -1 228 -1 229 -1 230 -1 231 -1 232 -1 233 -1 234 -1 235 -1 236 -1\
237 -1 238 -1 239 -1 240 -1 241 -1 242 -1 243 -1 244 -1 245 -1 246 -1 247 -1\
248 -1 249 -1 250 -1 251 -1 252 -1 253 -1 254 -1 255 -1}}

###############################################################################

unset -nocomplain x0

###############################################################################

runTest {test string-98.1 {string first (various)} -body {
  set needle foo; set haystack foobarfoobar

  list [string first $needle $haystack] [string first $needle $haystack 0] \
      [string first $needle $haystack 3] [string first $needle $haystack 6] \
      [string first $needle $haystack 7] [string first $needle $haystack 9] \
      [string first $needle $haystack 11] [string first $needle $haystack 12] \
      [string first $needle $haystack 9999] [string first $needle $haystack -1]
} -cleanup {
  unset -nocomplain needle haystack
} -result {0 0 6 6 -1 -1 -1 -1 -1 0}}

###############################################################################

runTest {test string-98.2 {string last (various)} -body {
  set needle foo; set haystack foobarfoobar

  list [string last $needle $haystack] [string last $needle $haystack 0] \
      [string last $needle $haystack 3] [string last $needle $haystack 6] \
      [string last $needle $haystack 7] [string last $needle $haystack 9] \
      [string last $needle $haystack 11] [string last $needle $haystack 12] \
      [string last $needle $haystack 9999] [string last $needle $haystack -1]
} -cleanup {
  unset -nocomplain needle haystack
} -result {6 -1 0 0 0 6 6 6 6 -1}}

###############################################################################

runTest {test string-98.3 {string first (ordinal)} -body {
  list [string first \xFE th] [string first \xFE th 0] \
      [string first \xFE th 1] [string first \xFE th 2]
} -result {-1 -1 -1 -1}}

###############################################################################

runTest {test string-98.4 {string last (ordinal)} -body {
  list [string last \xFE th] [string last \xFE th 0] \
      [string last \xFE th 1] [string last \xFE th 2]
} -result {-1 -1 -1 -1}}

###############################################################################

runTest {test string-98.5 {string first} -body {
  list [string first "" ""] [string first "" a] [string first a ""] \
      [string first a a] [string first a aa] [string first aa a] \
      [string first aa aa] [string first aa aaa]
} -result {-1 -1 -1 0 0 -1 0 0}}

###############################################################################

runTest {test string-98.6 {string last} -body {
  list [string last "" ""] [string last "" a] [string last a ""] \
      [string last a a] [string last a aa] [string last aa a] \
      [string last aa aa] [string last aa aaa]
} -result {-1 -1 -1 0 1 -1 0 1}}

###############################################################################

runTest {test string-99.1 {string map string replace} -body {
  string map [list a b b c] "this 'a' is 'a' test of 'b' 'a'."
} -result {this 'b' is 'b' test of 'c' 'b'.}}

###############################################################################

runTest {test string-99.2 {string map string remove} -body {
  string map [list a ""] "this 'a' is 'a' test of 'b' 'a'."
} -result {this '' is '' test of 'b' ''.}}

###############################################################################

runTest {test string-99.3 {string map string insert} -body {
  string map [list a aa] "this 'a' is 'a' test of 'b' 'a'."
} -result {this 'aa' is 'aa' test of 'b' 'aa'.}}

###############################################################################

runTest {test string-99.4 {string map string remove/insert} -body {
  string map [list b "" a aa] "this 'a' is 'a' test of 'b' 'a'."
} -result {this 'aa' is 'aa' test of '' 'aa'.}}

###############################################################################

runTest {test string-99.5 {string map string insert/remove} -body {
  string map [list a aa b ""] "this 'a' is 'a' test of 'b' 'a'."
} -result {this 'aa' is 'aa' test of '' 'aa'.}}

###############################################################################

runTest {test string-99.6 {string map string insert/remove/replace} -body {
  string map [list a aa b "" c d] "this 'a' is 'a' test of 'b' 'c'."
} -result {this 'aa' is 'aa' test of '' 'd'.}}

###############################################################################

runTest {test string-99.7 {string map with -maximum 1} -body {
  list [string map -maximum 1 -countvar bar [list foo bar] "foo foo"] $bar
} -cleanup {
  unset -nocomplain bar
} -constraints {eagle} -result {{bar foo} 1}}

###############################################################################

runTest {test string-99.8 {string map with -maximum 0} -body {
  list [string map -maximum 0 -countvar bar [list foo bar] "foo foo"] $bar
} -cleanup {
  unset -nocomplain bar
} -constraints {eagle} -result {{foo foo} 0}}

###############################################################################

runTest {test string-99.9 {string map with -maximum -1} -body {
  list [string map -maximum -1 -countvar bar [list foo bar] "foo foo"] $bar
} -cleanup {
  unset -nocomplain bar
} -constraints {eagle} -result {{bar bar} 2}}

###############################################################################

runTest {test string-99.10 {string map duplicate "keys"} -body {
  string map [list a b a c] foobar
} -result {foobbr}}

###############################################################################

runTest {test string-99.11 {string map duplicate "values"} -body {
  string map [list f a o a] foobar
} -result {aaabar}}

###############################################################################

runTest {test string-99.12 {string map duplicate "keys" / "values"} -body {
  string map [list f a f a o b] foobar
} -result {abbbar}}

###############################################################################

runTest {test string-99.13 {string is list} -body {
  list [expr {int([string is list ""])}] \
      [expr {int([string is list -strict ""])}] \
      [expr {int([string is list Z])}] \
      [expr {int([string is list -strict Z])}] \
      [expr {int([string is list "Z Z"])}] \
      [expr {int([string is list -strict "Z Z"])}] \
      [expr {int([string is list "Z \{"])}] \
      [expr {int([string is list -strict "Z \{"])}] \
      [expr {int([string is list "Z \\\{"])}] \
      [expr {int([string is list -strict "Z \\\{"])}]
} -constraints {tcl85Feature} -result {1 1 1 1 1 1 0 0 1 1}}

###############################################################################

runTest {test string-99.14 {string is dict} -body {
  list [expr {int([string is dict ""])}] \
      [expr {int([string is dict -strict ""])}] \
      [expr {int([string is dict Z])}] \
      [expr {int([string is dict -strict Z])}] \
      [expr {int([string is dict "Z Z"])}] \
      [expr {int([string is dict -strict "Z Z"])}] \
      [expr {int([string is dict "Z \{"])}] \
      [expr {int([string is dict -strict "Z \{"])}] \
      [expr {int([string is dict "Z \\\{"])}] \
      [expr {int([string is dict -strict "Z \\\{"])}]
} -constraints {eagle} -result {1 1 0 0 1 1 0 0 1 1}}

###############################################################################

runTest {test string-99.15 {string is array} -body {
  list [expr {[string is array ""]}] \
      [expr {[string is array -strict ""]}] \
      [expr {[string is array no_library]}] \
      [expr {[string is array -strict no_library]}] \
      [expr {[string is array no_library(]}] \
      [expr {[string is array -strict no_library(]}] \
      [expr {[string is array no_library)]}] \
      [expr {[string is array -strict no_library)]}] \
      [expr {[string is array no_library()]}] \
      [expr {[string is array -strict no_library()]}] \
      [expr {[string is array no_library(no)]}] \
      [expr {[string is array -strict no_library(no)]}] \
      [expr {[string is array tcl_library]}] \
      [expr {[string is array -strict tcl_library]}] \
      [expr {[string is array tcl_library(]}] \
      [expr {[string is array -strict tcl_library(]}] \
      [expr {[string is array tcl_library)]}] \
      [expr {[string is array -strict tcl_library)]}] \
      [expr {[string is array tcl_library()]}] \
      [expr {[string is array -strict tcl_library()]}] \
      [expr {[string is array tcl_library(no)]}] \
      [expr {[string is array -strict tcl_library(no)]}] \
      [expr {[string is array tcl_platform]}] \
      [expr {[string is array -strict tcl_platform]}] \
      [expr {[string is array tcl_platform(]}] \
      [expr {[string is array -strict tcl_platform(]}] \
      [expr {[string is array tcl_platform)]}] \
      [expr {[string is array -strict tcl_platform)]}] \
      [expr {[string is array tcl_platform()]}] \
      [expr {[string is array -strict tcl_platform()]}] \
      [expr {[string is array tcl_platform(no)]}] \
      [expr {[string is array -strict tcl_platform(no)]}] \
      [expr {[string is array tcl_platform(engine)]}] \
      [expr {[string is array -strict tcl_platform(engine)]}] \
      [expr {[string is array env]}] \
      [expr {[string is array -strict env]}] \
      [expr {[string is array env(]}] \
      [expr {[string is array -strict env(]}] \
      [expr {[string is array env)]}] \
      [expr {[string is array -strict env)]}] \
      [expr {[string is array env()]}] \
      [expr {[string is array -strict env()]}] \
      [expr {[string is array env(no)]}] \
      [expr {[string is array -strict env(no)]}] \
      [expr {[string is array env(PATH)]}] \
      [expr {[string is array -strict env(PATH)]}]
} -constraints {eagle} -result {True False False False False False False False\
False False False False False False False False False False False False False\
False True True False False False False False False False False False False\
True True False False False False False False False False False False}}

###############################################################################

runTest {test string-99.16 {string is element} -body {
  list [expr {[string is element ""]}] \
      [expr {[string is element -strict ""]}] \
      [expr {[string is element no_library]}] \
      [expr {[string is element -strict no_library]}] \
      [expr {[string is element no_library(]}] \
      [expr {[string is element -strict no_library(]}] \
      [expr {[string is element no_library)]}] \
      [expr {[string is element -strict no_library)]}] \
      [expr {[string is element no_library()]}] \
      [expr {[string is element -strict no_library()]}] \
      [expr {[string is element no_library(no)]}] \
      [expr {[string is element -strict no_library(no)]}] \
      [expr {[string is element tcl_library]}] \
      [expr {[string is element -strict tcl_library]}] \
      [expr {[string is element tcl_library(]}] \
      [expr {[string is element -strict tcl_library(]}] \
      [expr {[string is element tcl_library)]}] \
      [expr {[string is element -strict tcl_library)]}] \
      [expr {[string is element tcl_library()]}] \
      [expr {[string is element -strict tcl_library()]}] \
      [expr {[string is element tcl_library(no)]}] \
      [expr {[string is element -strict tcl_library(no)]}] \
      [expr {[string is element tcl_platform]}] \
      [expr {[string is element -strict tcl_platform]}] \
      [expr {[string is element tcl_platform(]}] \
      [expr {[string is element -strict tcl_platform(]}] \
      [expr {[string is element tcl_platform)]}] \
      [expr {[string is element -strict tcl_platform)]}] \
      [expr {[string is element tcl_platform()]}] \
      [expr {[string is element -strict tcl_platform()]}] \
      [expr {[string is element tcl_platform(no)]}] \
      [expr {[string is element -strict tcl_platform(no)]}] \
      [expr {[string is element tcl_platform(engine)]}] \
      [expr {[string is element -strict tcl_platform(engine)]}] \
      [expr {[string is element env]}] \
      [expr {[string is element -strict env]}] \
      [expr {[string is element env(]}] \
      [expr {[string is element -strict env(]}] \
      [expr {[string is element env)]}] \
      [expr {[string is element -strict env)]}] \
      [expr {[string is element env()]}] \
      [expr {[string is element -strict env()]}] \
      [expr {[string is element env(no)]}] \
      [expr {[string is element -strict env(no)]}] \
      [expr {[string is element env(PATH)]}] \
      [expr {[string is element -strict env(PATH)]}]
} -constraints {eagle} -result {True False False False False False False False\
False False False False False False False False False False False False False\
False False False False False False False False False False False True True\
False False False False False False False False False False True True}}

###############################################################################

runTest {test string-99.17 {string is scalar} -body {
  list [expr {[string is scalar ""]}] \
      [expr {[string is scalar -strict ""]}] \
      [expr {[string is scalar no_library]}] \
      [expr {[string is scalar -strict no_library]}] \
      [expr {[string is scalar no_library(]}] \
      [expr {[string is scalar -strict no_library(]}] \
      [expr {[string is scalar no_library)]}] \
      [expr {[string is scalar -strict no_library)]}] \
      [expr {[string is scalar no_library()]}] \
      [expr {[string is scalar -strict no_library()]}] \
      [expr {[string is scalar no_library(no)]}] \
      [expr {[string is scalar -strict no_library(no)]}] \
      [expr {[string is scalar tcl_library]}] \
      [expr {[string is scalar -strict tcl_library]}] \
      [expr {[string is scalar tcl_library(]}] \
      [expr {[string is scalar -strict tcl_library(]}] \
      [expr {[string is scalar tcl_library)]}] \
      [expr {[string is scalar -strict tcl_library)]}] \
      [expr {[string is scalar tcl_library()]}] \
      [expr {[string is scalar -strict tcl_library()]}] \
      [expr {[string is scalar tcl_library(no)]}] \
      [expr {[string is scalar -strict tcl_library(no)]}] \
      [expr {[string is scalar tcl_platform]}] \
      [expr {[string is scalar -strict tcl_platform]}] \
      [expr {[string is scalar tcl_platform(]}] \
      [expr {[string is scalar -strict tcl_platform(]}] \
      [expr {[string is scalar tcl_platform)]}] \
      [expr {[string is scalar -strict tcl_platform)]}] \
      [expr {[string is scalar tcl_platform()]}] \
      [expr {[string is scalar -strict tcl_platform()]}] \
      [expr {[string is scalar tcl_platform(no)]}] \
      [expr {[string is scalar -strict tcl_platform(no)]}] \
      [expr {[string is scalar tcl_platform(engine)]}] \
      [expr {[string is scalar -strict tcl_platform(engine)]}] \
      [expr {[string is scalar env]}] \
      [expr {[string is scalar -strict env]}] \
      [expr {[string is scalar env(]}] \
      [expr {[string is scalar -strict env(]}] \
      [expr {[string is scalar env)]}] \
      [expr {[string is scalar -strict env)]}] \
      [expr {[string is scalar env()]}] \
      [expr {[string is scalar -strict env()]}] \
      [expr {[string is scalar env(no)]}] \
      [expr {[string is scalar -strict env(no)]}] \
      [expr {[string is scalar env(PATH)]}] \
      [expr {[string is scalar -strict env(PATH)]}]
} -constraints {eagle} -result {True False False False False False False False\
False False False False True True False False False False False False False\
False False False False False False False False False False False False False\
False False False False False False False False False False False False}}

###############################################################################

runTest {test string-99.18 {string is command} -body {
  list [expr {[string is command ""]}] \
      [expr {[string is command -strict ""]}] \
      [expr {[string is command -strict set]}] \
      [expr {[string is command -strict ::set]}] \
      [expr {[string is command -strict tclLog]}] \
      [expr {[string is command -strict ::tclLog]}] \
      [expr {[string is command -strict notThere]}] \
      [expr {[string is command -strict ::notThere]}] \
      [expr {[string is command -strict tcl::tm::UnknownHandler]}] \
      [expr {[string is command -strict ::tcl::tm::UnknownHandler]}] \
      [expr {[string is command -strict no::tm::UnknownHandler]}] \
      [expr {[string is command -strict ::no::tm::UnknownHandler]}]
} -constraints {eagle} -result \
{True False True True True True False False True True False False}}

###############################################################################

runTest {test string-100.1 {string cat, via TIP #429} -body {
  list [string cat] [string cat a] [string cat a b] \
      [string cat a b c] [string cat \\ a1 b2 c3 \\] \
      [string cat \{ a1 b2 c3 \}] [string cat \$ a1 b2 c3 \$]
} -constraints {tip429} -result {{} a ab abc \\a1b2c3\\ {{a1b2c3}} {$a1b2c3$}}}

###############################################################################

runTest {test string-101.1 {string match w/sub-patterns} -body {
  list [string match -mode +SubPattern "b{b,c}f" bbf] \
      [string match -mode +SubPattern "b{b,c}f" bcf] \
      [string match -mode +SubPattern "b{a,d}f" bbf] \
      [string match -mode +SubPattern "*b{b,c}f" fbbf] \
      [string match -mode +SubPattern "b{b,c}f*" bcfz] \
      [string match -mode +SubPattern "*b{b,c}f*" abcfz] \
      [string match -mode +SubPattern "a{1,2,3,\\,}z" a,z] \
      [string match -mode +SubPattern "f{{a,b,f},{o,a},{b,o}}o" foo] \
      [string match -mode +SubPattern "f{{a,b,f},{o,a},{b,o}}o" faobo] \
      [string match -mode +SubPattern "f{{a,b,f}{o,a}{b,o}}o" foo] \
      [string match -mode +SubPattern "f{{a,b,f}{o,a}{b,o}}o" faobo] \
      [string match -mode +SubPattern "f{{a,b,f}}{{o,a}}{{b,o}}o" foo] \
      [string match -mode +SubPattern "f{{a,b,f}}{{o,a}}{{b,o}}o" faobo] \
      [string match -mode +SubPattern "f{a,b,f}{o,a}{b,o}o" foo] \
      [string match -mode +SubPattern "f{a,b,f}{o,a}{b,o}o" faobo] \
      [string match -mode +SubPattern "b{}a{}r" bar] \
      [string match -mode {+SubPattern EmptySubPattern} "b{?}a{}r" bar] \
      [string match -mode {+SubPattern EmptySubPattern} "b{*}a{}r" bar] \
      [string match -mode {+SubPattern EmptySubPattern} "b{??}a{}r" bear] \
      [string match -mode {+SubPattern EmptySubPattern} "b{**}a{}r" bear] \
      [string match -mode {+SubPattern EmptySubPattern} "b{?}a{}r" boar] \
      [string match -mode {+SubPattern EmptySubPattern} "b{?}a{}r" moar] \
      [string match -mode {+SubPattern EmptySubPattern} "b{??}a{}r" moar] \
      [string match -mode {+SubPattern EmptySubPattern} "b{**}a{}r" moar]
} -constraints {eagle} -result {True True False True True True True True False\
False True False True False True False False True False True True False False\
False}}

###############################################################################

runTest {test encoding-100.0 {encoding system} -body {
  encoding system
} -constraints {eagle} -result {utf-16}}

###############################################################################

runTest {test encoding-100.1 {encoding names (built-in)} -setup {
  set names [encoding names]
} -body {
  list [expr {[lsearch -exact -- $names utf-7] != -1}] \
      [expr {[lsearch -exact -- $names utf-8] != -1}] \
      [expr {[lsearch -exact -- $names utf-16] != -1}] \
      [expr {[lsearch -exact -- $names binary] != -1}] \
      [expr {[lsearch -exact -- $names channelDefault] != -1}] \
      [expr {[lsearch -exact -- $names default] != -1}] \
      [expr {[lsearch -exact -- $names null] != -1}] \
      [expr {[lsearch -exact -- $names scriptDefault] != -1}] \
      [expr {[lsearch -exact -- $names systemDefault] != -1}] \
      [expr {[lsearch -exact -- $names tclDefault] != -1}] \
      [expr {[lsearch -exact -- $names textDefault] != -1}] \
      [expr {[lsearch -exact -- $names Identity] != -1}] \
      [expr {[lsearch -exact -- $names OneByte] != -1}] \
      [expr {[lsearch -exact -- $names TwoByte] != -1}] \
      [expr {[lsearch -exact -- $names Tcl] != -1}]
} -cleanup {
  unset -nocomplain names
} -constraints {eagle} -result \
{True True True True True True True True True True True True True True True}}

###############################################################################

runTest {test encoding-100.2 {encoding convertfrom} -body {
  encoding convertfrom utf-8 "\xc2\xa3"
} -result "\xa3"}

###############################################################################

runTest {test encoding-100.3 {encoding convertto} -body {
  encoding convertto utf-8 \xa3
} -result "\xc2\xa3"}

###############################################################################

runTest {test encoding-100.4 {encoding getstring} -body {
  set bytes [object create -alias Byte\[\] 256]
  for {set index 0} {$index < [$bytes Length]} {incr index} {
    set byte [object invoke -create Byte Parse $index]
    $bytes SetValue $byte $index
  }
  encoding getstring $bytes binary
} -cleanup {
  unset -nocomplain index byte bytes
} -constraints {eagle command.object} -result [appendArgs \
\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f \
\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f \
\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f \
\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f \
\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f \
\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f \
\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f \
\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f \
\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f \
\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f \
\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf \
\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf \
\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf \
\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf \
\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef \
\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff]}

###############################################################################

#
# NOTE: This test uses the HMAC-SHA-384 and HMAC-SHA-512 keyed hash algorithms.
#       These were updated and now produce different results starting with the
#       .NET Framework 2.0 Service Pack 1.  Please refer to the following page
#       for more information:
#
#       https://blogs.msdn.com/shawnfa/archive/2007/01/31/
#          please-do-not-use-the-net-2-0-hmacsha512-and-hmacsha384-classes.aspx
#
#       https://bit.ly/2chRv2v (shortened version of above)
#
#       This test has been constrained to run only on the .NET Framework 2.0
#       Service Pack 1 or higher (including the .NET Framework 4.x).
#
runTest {test hash-1.1 {hash algorithms} -body {
  set text "random processes do not produce information"
  set result [list]

  foreach pair [lsort -unique [hash list]] {
    set type [lindex $pair 0]
    set name [lindex $pair 1]

    if {[string match -nocase -- http:* $name] || \
        [string match -nocase -- https:* $name]} then {
      continue
    }

    if {$type eq "normal"} then {
      lappend result [list $type $name \
          [hash $type $name $text]]
    } else {
      lappend result [list $type $name \
          [hash $type $name $text F96D8B9D49C6F03D]]
    }
  }

  lsort $result
} -cleanup {
  unset -nocomplain name type pair result text
} -constraints {eagle dotNet} -constraintExpression \
{[haveConstraint dotNet20Sp1OrHigher] || [haveConstraint dotNet40]} -result \
"\{keyed MACTripleDES B6095ED2AD96F6A5\} \{keyed\
System.Security.Cryptography.MACTripleDES B6095ED2AD96F6A5\} \{mac HMACMD5\
55CD9EE051258D537966F6914B2907CB\} \{mac HMACRIPEMD160\
913778721C4BA825B10E55788E17C5851080F4BC\} \{mac HMACSHA1\
457B0A2E4834FF8AA0F9BFAD83F7CA51EA9272B5\} \{mac HMACSHA256\
F4BB7209D8015710EC185E78F36C26B143DE6E891D42B0C83038BBA7EB65FE06\} \{mac\
HMACSHA384 [appendArgs F0253DF25F461FC75D997FF45DAEEDCB5242E7B5D94ECD76608EE7A \
6D6B0701AF147E5CF1D5C9A0A2DF0CCC379432C6B]\} \{mac HMACSHA512 [appendArgs 089B \
E78A5213E4C359CAC895E4187F5127B4E7B336F5440EC2DC907C3B8A92C95411FF1AE0A27E601C \
BF7B47BA53DB7D5CB7FB316D2CB4930922AB7A0AA19819]\} \{mac\
System.Security.Cryptography.HMAC 457B0A2E4834FF8AA0F9BFAD83F7CA51EA9272B5\}\
\{mac System.Security.Cryptography.HMACMD5 55CD9EE051258D537966F6914B2907CB\}\
\{mac System.Security.Cryptography.HMACRIPEMD160\
913778721C4BA825B10E55788E17C5851080F4BC\} \{mac\
System.Security.Cryptography.HMACSHA1 [appendArgs 457B0A2E4834FF8AA0F9BFAD83F7 \
CA51EA9272B5]\} \{mac System.Security.Cryptography.HMACSHA256\
F4BB7209D8015710EC185E78F36C26B143DE6E891D42B0C83038BBA7EB65FE06\} \{mac\
System.Security.Cryptography.HMACSHA384 [appendArgs F0253DF25F461FC75D997FF45D \
AEEDCB5242E7B5D94ECD76608EE7A6D6B0701AF147E5CF1D5C9A0A2DF0CCC379432C6B]\} \{mac\
System.Security.Cryptography.HMACSHA512 [appendArgs 089BE78A5213E4C359CAC895E4 \
187F5127B4E7B336F5440EC2DC907C3B8A92C95411FF1AE0A27E601CBF7B47BA53DB7D5CB7FB31 \
6D2CB4930922AB7A0AA19819]\} \{mac\
System.Security.Cryptography.KeyedHashAlgorithm\
457B0A2E4834FF8AA0F9BFAD83F7CA51EA9272B5\} \{normal MD5\
4B002D94863407B17C9C9674F92B83D2\} \{normal RIPEMD-160\
A8F84EF9366CE15328DE9926B95701CCF23AC714\} \{normal RIPEMD160\
A8F84EF9366CE15328DE9926B95701CCF23AC714\} \{normal SHA\
9140A7C57CF2517AE1CA10742CEAA50C10D87DD3\} \{normal SHA-256\
555840126C25C86F319ECFDCDB9C41D2110AB33591FF2F18FF57A29E6C1FAB8E\} \{normal\
SHA-384 [appendArgs 817579DE79219516CED0CEFEC8E8943B06D6B01BE196C891A935073AF6 \
77A4BC3782304A76641AA6BF098CE792A93533]\} \{normal SHA-512 [appendArgs 0B2D938 \
3516B2170FB1CFE7E04DAE6BAD3DD26D31D923F17FDA211950DF4F60408E58986E3746C531D14B \
F1897023424D3AC68ACBE47B0F5481AF150291BC602]\} \{normal SHA1\
9140A7C57CF2517AE1CA10742CEAA50C10D87DD3\} \{normal SHA256\
555840126C25C86F319ECFDCDB9C41D2110AB33591FF2F18FF57A29E6C1FAB8E\} \{normal\
SHA384 [appendArgs 817579DE79219516CED0CEFEC8E8943B06D6B01BE196C891A935073AF67 \
7A4BC3782304A76641AA6BF098CE792A93533]\} \{normal SHA512 [appendArgs 0B2D93835 \
16B2170FB1CFE7E04DAE6BAD3DD26D31D923F17FDA211950DF4F60408E58986E3746C531D14BF1 \
897023424D3AC68ACBE47B0F5481AF150291BC602]\} \{normal\
System.Security.Cryptography.HashAlgorithm\
9140A7C57CF2517AE1CA10742CEAA50C10D87DD3\} \{normal\
System.Security.Cryptography.MD5 4B002D94863407B17C9C9674F92B83D2\} \{normal\
System.Security.Cryptography.RIPEMD160\
A8F84EF9366CE15328DE9926B95701CCF23AC714\} \{normal\
System.Security.Cryptography.RIPEMD160Managed\
A8F84EF9366CE15328DE9926B95701CCF23AC714\} \{normal\
System.Security.Cryptography.SHA1 9140A7C57CF2517AE1CA10742CEAA50C10D87DD3\}\
\{normal System.Security.Cryptography.SHA256\
555840126C25C86F319ECFDCDB9C41D2110AB33591FF2F18FF57A29E6C1FAB8E\} \{normal\
System.Security.Cryptography.SHA384 [appendArgs 817579DE79219516CED0CEFEC8E894 \
3B06D6B01BE196C891A935073AF677A4BC3782304A76641AA6BF098CE792A93533]\} \{normal\
System.Security.Cryptography.SHA512 [appendArgs 0B2D9383516B2170FB1CFE7E04DAE6 \
BAD3DD26D31D923F17FDA211950DF4F60408E58986E3746C531D14BF1897023424D3AC68ACBE47 \
B0F5481AF150291BC602]\}"}

###############################################################################

runTest {test stringMatch-101.1 {callback match mode} -setup {
  set interp [interp create]

  object invoke Eagle._Tests.Default TestSetMatchCallback $interp true
} -body {
  set result [list]

  foreach pattern [list one o* o.* ^(*)\$] {
    set match false; set error null

    set code [object invoke -flags +NonPublic \
        Eagle._Components.Private.StringOps Match \
        $interp Callback one $pattern false null \
        None match error]

    if {[string length $error] > 0} then {
      set error [object invoke $error ToString]
    }

    lappend result [list $code $match $error]
  }

  set result
} -cleanup {
  catch {
    object invoke Eagle._Tests.Default TestSetMatchCallback $interp false
  }

  catch {interp delete $interp}

  unset -nocomplain result error match code pattern interp
} -constraints {eagle command.object compile.TEST\
Eagle._Tests.Default.TestSetMatchCallback} -match glob -result {{Ok True {}}\
{Ok True {}} {Ok True {}} {Error False {System.ArgumentException: *}}}}

###############################################################################

runTest {test stringMatch-101.2 {callback match mode error} -setup {
  set interp [interp create]
} -body {
  set result [list]
  set match false; set error null

  set code [object invoke -flags +NonPublic \
      Eagle._Components.Private.StringOps Match \
      $interp Callback one two false null None \
      match error]

  if {[string length $error] > 0} then {
    set error [object invoke $error ToString]
  }

  lappend result [list $code $match $error]
} -cleanup {
  catch {interp delete $interp}

  unset -nocomplain result error match code interp
} -constraints {eagle command.object compile.TEST\
Eagle._Tests.Default.TestSetMatchCallback} -result \
{{Error False {invlid match callback}}}}

###############################################################################

source [file join [file normalize [file dirname [info script]]] epilogue.eagle]
