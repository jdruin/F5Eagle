###############################################################################
#
# winforms7.eagle --
#
# Extensible Adaptable Generalized Logic Engine (Eagle)
#
# Copyright (c) 2007-2012 by Joe Mistachkin.  All rights reserved.
#
# See the file "license.terms" for information on usage and redistribution of
# this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: $
#
###############################################################################

source [file join [file normalize [file dirname [info script]]] prologue.eagle]

###############################################################################
# MONO: On Mono 3.0.2 beta, these tests do not function properly due to
#       a total failure to load the System.Windows.Forms assembly, resulting
#       from incorrect DLL mappings in the "etc/mono/config" configuration
#       file copied by the installer.  Attempts to load and/or use Windows
#       Forms functionality will result in a very complex looking exception,
#       with the innermost exception being very similar to the following:
#
#       System.DllNotFoundException: /tmp/install/lib/libgdiplus.so
#
#       The workaround to "fix" this issue on Windows is to simply remove
#       the both "gdiplus" related lines from the configuration file.
#
#       See: https://bugzilla.xamarin.com/show_bug.cgi?id=8309
###############################################################################
# MONO: Due to a Mono bug, some tests are disabled on Mono.
#       See: https://bugzilla.novell.com/show_bug.cgi?id=471257
###############################################################################

runTest {test winForms-7.1 {event handler removal} -setup {
  proc handleClickEvent { sender e } {
    #
    # NOTE: We know this is a MouseEventArgs because this is a
    #       click event handler.
    #
    lappend ::x [$sender ToString] [$e X] [$e Y] [$e Button]

    #
    # NOTE: Terminate our wait.
    #
    set ::forever 1
  }

  set savedSleeptime [interp sleeptime {}]; # save
} -body {
  set assembly [object load -import System.Windows.Forms]
  set form [object create -alias Form]

  $form Text [appendArgs [info engine] " Test Form Title"]
  $form Show

  set button [object create -alias System.Windows.Forms.Button]

  $button Left [expr {([$form ClientSize.Width] - [$button Width]) / 2}]
  $button Top [expr {([$form ClientSize.Height] - [$button Height]) / 2}]

  $button Text "Click Here"
  $button add_Click handleClickEvent

  object invoke $form.Controls Add $button

  interp sleeptime {} 200

  set x [list]
  set mouseEventArgs [object create -alias MouseEventArgs Left 1 12 34 0]
  after 1000 [list $button -flags +NonPublic OnClick $mouseEventArgs]

  vwait forever

  $button remove_Click handleClickEvent

  after 1000 [list $button -flags +NonPublic OnClick $mouseEventArgs]
  after 2000 [list set forever 1]
  vwait forever

  set x
} -cleanup {
  cleanupWinForms

  interp sleeptime {} $savedSleeptime; # restore

  unset -nocomplain x forever mouseEventArgs button form assembly \
      savedSleeptime

  catch {object removecallback handleClickEvent}

  rename handleClickEvent ""
} -constraints {eagle command.object compile.WINFORMS winForms\
monoMatchFramework} -result {{System.Windows.Forms.Button, Text: Click Here} 12\
34 Left}}

###############################################################################

source [file join [file normalize [file dirname [info script]]] epilogue.eagle]
