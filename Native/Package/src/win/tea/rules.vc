#------------------------------------------------------------------------------
# rules.vc --
#
#	Microsoft Visual C++ makefile include for decoding the commandline
#	macros.  This file does not need editing to build Tcl.
#
#	This version is modified from the Tcl source version to support
#	building extensions using nmake.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# Copyright (c) 2001-2003 David Gravereaux.
# Copyright (c) 2003-2008 Patrick Thoyts
# Copyright (c) 2012 Joe Mistachkin.
#------------------------------------------------------------------------------

!ifndef _RULES_VC
_RULES_VC = 1

TCC		= $(CC) # built-in default.
TRC		= $(RC) # built-in default.
TLINK	= link
TLIB	= lib

### Setup variables for natively compiling binaries when cross-compilation
### is enabled.
!ifndef NCC
!ifdef XCOMPILE
### Cross-compiling, attempt to force use of the x86 compiler and libraries
### for the tool(s) we need to execute during the compilation process.
NCC					= "$(VCINSTALLDIR)\bin\cl.exe"
NCRTLIBPATH	= $(VCINSTALLDIR)\lib
NCRTLIBPATH	= $(NCRTLIBPATH:\\=\)
NSDKLIBPATH	= $(WINDOWSSDKDIR)\lib
NSDKLIBPATH	= $(NSDKLIBPATH:\\=\)
NLIBPATHS		= "/LIBPATH:$(NCRTLIBPATH)" "/LIBPATH:$(NSDKLIBPATH)"
!else
NCC					= $(CC) # built-in default.
NLIBPATHS 	=
!endif
!endif

!ifndef INSTALLDIR
### Assume the normal default.
_INSTALLDIR	= C:\Program Files\Tcl
!else
### Fix the path separators.
_INSTALLDIR	= $(INSTALLDIR:/=\)
!endif

#----------------------------------------------------------
# Set the proper copy method to avoid overwrite questions
# to the user when copying files and selecting the right
# "delete all" method.
#----------------------------------------------------------

SN = sn.exe

!if "$(OS)" == "Windows_NT"
DEL			= del
MKDIR		= mkdir
RMDIR		= rmdir /S /Q
ERRNULL	= 2>NUL
!if ![ver | find "4.0" > nul]
CPY			= echo y | xcopy /I >NUL
COPY		= copy >NUL
!else
CPY			= xcopy /I /Y >NUL
COPY		= copy /Y >NUL
!endif
!else # "$(OS)" != "Windows_NT"
DEL			= del
MKDIR		= mkdir
RMDIR		= deltree /Y
NULL		= \NUL # Used in testing directory existence
ERRNULL	= >NUL # Win9x shell cannot redirect stderr
CPY			= xcopy /I >_JUNK.OUT # On Win98 NUL does not work here.
COPY		= copy >_JUNK.OUT # On Win98 NUL does not work here.
!endif

#------------------------------------------------------------------------------
# build the helper app we need to trim trailing spaces and tabs from files.
#------------------------------------------------------------------------------

!if !exist(trimspace.exe)
!if [$(NCC) -nologo trimspace.c -link $(NLIBPATHS) -subsystem:console >NUL]
!endif
!endif

#------------------------------------------------------------------------------
# Determine the host and target architectures and compiler version.
#------------------------------------------------------------------------------

_HASH=^#
_VC_MANIFEST_EMBED_EXE=
_VC_MANIFEST_EMBED_DLL=
VCVER=0
!if ![echo MSCVER=_MSC_VER > vercl.x] \
    && ![echo $(_HASH)if defined(_M_IX86) >> vercl.x] \
    && ![echo ARCH=IX86 >> vercl.x] \
    && ![echo ARCH_IS64BIT=0 >> vercl.x] \
    && ![echo $(_HASH)elif defined(_M_IA64) >> vercl.x] \
    && ![echo ARCH=IA64 >> vercl.x] \
    && ![echo ARCH_IS64BIT=1 >> vercl.x] \
    && ![echo $(_HASH)elif defined(_M_AMD64) >> vercl.x] \
    && ![echo ARCH=AMD64 >> vercl.x] \
    && ![echo ARCH_IS64BIT=1 >> vercl.x] \
    && ![echo $(_HASH)elif defined(_M_ARM) >> vercl.x] \
    && ![echo ARCH=ARM >> vercl.x] \
    && ![echo ARCH_IS64BIT=0 >> vercl.x] \
    && ![echo $(_HASH)elif defined(_M_ARM64) >> vercl.x] \
    && ![echo ARCH=ARM64 >> vercl.x] \
    && ![echo ARCH_IS64BIT=1 >> vercl.x] \
    && ![echo $(_HASH)endif >> vercl.x] \
    && ![$(NCC) -nologo -TC -P vercl.x $(ERRNULL)]
!include vercl.i
!if ![echo VCVER= \> vercl.vc] \
    && ![trimspace vercl.vc vercl.ts] \
    && ![$(CPY) vercl.ts vercl.vc] \
    && ![set /A $(MSCVER) / 100 - 6 >> vercl.vc]
!include vercl.vc
!endif
!endif
!if ![$(DEL) /Q /F vercl.i vercl.ts vercl.vc vercl.x $(ERRNULL)]
!endif

!ifndef NATIVE_ARCH
!if ![reg query HKLM\Hardware\Description\System\CentralProcessor\0 /v Identifier | findstr /i x86]
NATIVE_ARCH=IX86
!endif

!if ![reg query HKLM\Hardware\Description\System\CentralProcessor\0 /v Identifier | findstr /i Intel64]
NATIVE_ARCH=AMD64
!endif
!endif

!ifndef NATIVE_ARCH
MSG=^
The host architecture was not recognized.
!error $(MSG)
!endif

# With MSVC8/MSVC9 we must deal with manifest resources.
!if $(MSCVER) > 1399 && $(MSCVER) < 1600
_VC_MANIFEST_EMBED_EXE=if exist $@.manifest mt -nologo -manifest $@.manifest -outputresource:$@;1
_VC_MANIFEST_EMBED_DLL=if exist $@.manifest mt -nologo -manifest $@.manifest -outputresource:$@;2
!endif

!ifndef MACHINE
MACHINE=$(ARCH)
!endif

!ifndef MACHINE_IS64BIT
MACHINE_IS64BIT=$(ARCH_IS64BIT)
!endif

!if "$(MACHINE)" == "IX86"
TCL_PLATFORM = Win32
!elseif "$(MACHINE)" == "IA64"
TCL_PLATFORM = Itanium
!elseif "$(MACHINE)" == "AMD64"
TCL_PLATFORM = x64
!elseif "$(MACHINE)" == "ARM"
TCL_PLATFORM = ARM
!elseif "$(MACHINE)" == "ARM64"
TCL_PLATFORM = ARM64
!else
TCL_PLATFORM = Unknown
!endif

!ifndef CFG_ENCODING
CFG_ENCODING	= \"cp1252\"
!endif

!message ===============================================================================

#----------------------------------------------------------
# build the helper app we need to overcome nmake's limiting
# environment.
#----------------------------------------------------------

!if !exist(nmakehlp.exe)
!if [$(NCC) -nologo nmakehlp.c -link $(NLIBPATHS) -subsystem:console >NUL]
!endif
!endif

#----------------------------------------------------------
# Test for compiler features
#----------------------------------------------------------

### test for optimizations
!if [nmakehlp -c -Ot]
!message *** Compiler has 'Optimizations'
OPTIMIZING		= 1
!else
!message *** Compiler does not have 'Optimizations'
OPTIMIZING		= 0
!endif

OPTIMIZATIONS	=

!if [nmakehlp -c -Ot]
OPTIMIZATIONS	= $(OPTIMIZATIONS) -Ot
!endif

!if [nmakehlp -c -Oi]
OPTIMIZATIONS	= $(OPTIMIZATIONS) -Oi
!endif

!if [nmakehlp -c -Op]
OPTIMIZATIONS	= $(OPTIMIZATIONS) -Op
!endif

!if [nmakehlp -c -fp:strict]
OPTIMIZATIONS	= $(OPTIMIZATIONS) -fp:strict
!endif

!if [nmakehlp -c -Gs]
OPTIMIZATIONS	= $(OPTIMIZATIONS) -Gs
!endif

!if [nmakehlp -c -GS]
OPTIMIZATIONS	= $(OPTIMIZATIONS) -GS
!endif

!if [nmakehlp -c -GL]
OPTIMIZATIONS	= $(OPTIMIZATIONS) -GL
!endif

DEBUGFLAGS		=

!if [nmakehlp -c -RTC1]
DEBUGFLAGS		= $(DEBUGFLAGS) -RTC1
!elseif [nmakehlp -c -GZ]
DEBUGFLAGS		= $(DEBUGFLAGS) -GZ
!endif

COMPILERFLAGS	=

# In v13 -GL and -YX are incompatible.
!if [nmakehlp -c -YX]
!if ![nmakehlp -c -GL]
OPTIMIZATIONS	= $(OPTIMIZATIONS) -YX
!endif
!endif

!if "$(MACHINE)" == "IX86"
### test for pentium errata
!if [nmakehlp -c -QI0f]
!message *** Compiler has 'Pentium 0x0f fix'
COMPILERFLAGS	= $(COMPILERFLAGS) -QI0f
!else
!message *** Compiler does not have 'Pentium 0x0f fix'
!endif
!endif

!if "$(MACHINE)" == "IA64"
### test for Itanium errata
!if [nmakehlp -c -QIA64_Bx]
!message *** Compiler has 'B-stepping errata workarounds'
COMPILERFLAGS	= $(COMPILERFLAGS) -QIA64_Bx
!else
!message *** Compiler does not have 'B-stepping errata workarounds'
!endif
!endif

!if "$(MACHINE)" == "IX86"
### test for -align:4096, when align:512 will do.
!if [nmakehlp -l -opt:nowin98]
!message *** Linker has 'Win98 alignment problem'
ALIGN98_HACK	= 1
!else
!message *** Linker does not have 'Win98 alignment problem'
ALIGN98_HACK	= 0
!endif
!else
ALIGN98_HACK	= 0
!endif

LINKERFLAGS		=

!if [nmakehlp -l -ltcg]
LINKERFLAGS		= -ltcg
!endif

#----------------------------------------------------------
# Decode the options requested.
#----------------------------------------------------------

!if "$(OPTS)" == "" || [nmakehlp -f "$(OPTS)" "none"]
STATIC_BUILD	= 0
PRIVATE_STUBS	= 0
TCL_THREADS		= 1
DEBUG					= 0
SYMBOLS				= 0
PROFILE				= 0
PGO						= 0
MSVCRT				= 1
LOIMPACT			= 0
UNCHECKED			= 0
!else
!if [nmakehlp -f $(OPTS) "static"]
!message *** Doing static
STATIC_BUILD	= 1
!else
STATIC_BUILD	= 0
!endif
!if [nmakehlp -f $(OPTS) "privatestubs"]
!message *** Doing private stubs
PRIVATE_STUBS	= 1
!else
PRIVATE_STUBS	= 0
!endif
!if [nmakehlp -f $(OPTS) "nomsvcrt"]
!message *** Doing libcmt
MSVCRT				= 0
!else
!message *** Doing msvcrt
MSVCRT				= 1
!endif
!if [nmakehlp -f $(OPTS) "nothreads"]
!message *** Compile explicitly for non-threaded tcl
TCL_THREADS		= 0
!else
TCL_THREADS		= 1
!endif
!if [nmakehlp -f $(OPTS) "symbols"]
!message *** Doing symbols
DEBUG					= 1
!else
DEBUG					= 0
!endif
!if [nmakehlp -f $(OPTS) "pdbs"]
!message *** Doing pdbs
SYMBOLS				= 1
!else
SYMBOLS				= 0
!endif
!if [nmakehlp -f $(OPTS) "profile"]
!message *** Doing profile
PROFILE				= 1
!else
PROFILE				= 0
!endif
!if [nmakehlp -f $(OPTS) "pgi"]
!message *** Doing profile guided optimization instrumentation
PGO						= 1
!elseif [nmakehlp -f $(OPTS) "pgo"]
!message *** Doing profile guided optimization
PGO						= 2
!else
PGO						= 0
!endif
!if [nmakehlp -f $(OPTS) "loimpact"]
!message *** Doing loimpact
LOIMPACT			= 1
!else
LOIMPACT			= 0
!endif
!if [nmakehlp -f $(OPTS) "unchecked"]
!message *** Doing unchecked
UNCHECKED			= 1
!else
UNCHECKED			= 0
!endif
!endif


!if !$(STATIC_BUILD)
# We shouldn't statically put the extensions inside the shell when dynamic.
TCL_USE_STATIC_PACKAGES	= 0
!endif


#----------------------------------------------------------
# Figure-out how to name our intermediate and output directories.
# We wouldn't want different builds to use the same .obj files
# by accident.
#----------------------------------------------------------

#----------------------------------------
# Naming convention:
#   t = full thread support.
#   s = static library (as opposed to an
#	import library)
#   g = linked to the debug enabled C
#	run-time.
#   x = special static build when it
#	links to the dynamic C run-time.
#----------------------------------------
SUFX					= sgx

!if $(DEBUG)
CONFIGURATION	= Debug
!else
CONFIGURATION	= Release
!endif

BUILDDIRTOP		= $(CONFIGURATION)

!if "$(MACHINE)" != "IX86"
BUILDDIRTOP		= $(BUILDDIRTOP)_$(MACHINE)
!endif
!if $(VCVER) > 6
BUILDDIRTOP		= $(BUILDDIRTOP)_VC$(VCVER)
!endif

!if !$(DEBUG) || $(UNCHECKED)
SUFX					= $(SUFX:g=)
!endif

TMP_DIRFULL		= .\$(BUILDDIRTOP)\$(PROJECT)_DynamicStaticX

!if !$(STATIC_BUILD)
TMP_DIRFULL		= $(TMP_DIRFULL:Static=)
SUFX					= $(SUFX:s=)
EXT						= dll
!if $(MSVCRT)
TMP_DIRFULL		= $(TMP_DIRFULL:X=)
SUFX					= $(SUFX:x=)
!endif
!else
TMP_DIRFULL		= $(TMP_DIRFULL:Dynamic=)
EXT						= lib
!if !$(MSVCRT)
TMP_DIRFULL		= $(TMP_DIRFULL:X=)
SUFX					= $(SUFX:x=)
!endif
!endif

!ifndef TMP_DIR
TMP_DIR				= $(TMP_DIRFULL)
!ifndef OUT_DIR
OUT_DIR				= .\$(BUILDDIRTOP)
!endif
!else
!ifndef OUT_DIR
OUT_DIR				= $(TMP_DIR)
!endif
!endif


#----------------------------------------------------------
# Decode the statistics requested.
#----------------------------------------------------------

!if "$(STATS)" == "" || [nmakehlp -f "$(STATS)" "none"]
TCL_MEM_DEBUG			= 0
TCL_COMPILE_DEBUG	= 0
!else
!if [nmakehlp -f $(STATS) "all"] || [nmakehlp -f $(STATS) "memdbg"]
!message *** Doing memdbg
TCL_MEM_DEBUG			= 1
!else
TCL_MEM_DEBUG			= 0
!endif
!if [nmakehlp -f $(STATS) "all"] || [nmakehlp -f $(STATS) "compdbg"]
!message *** Doing compdbg
TCL_COMPILE_DEBUG	= 1
!else
TCL_COMPILE_DEBUG	= 0
!endif
!endif


#----------------------------------------------------------
# Decode the checks requested.
#----------------------------------------------------------

!if "$(CHECKS)" == "" || [nmakehlp -f "$(CHECKS)" "none"]
TCL_NO_DEPRECATED	= 0
WARNINGS					= -W3
!else
!if [nmakehlp -f $(CHECKS) "nodep"]
!message *** Doing nodep check
TCL_NO_DEPRECATED	= 1
!else
TCL_NO_DEPRECATED	= 0
!endif
!if [nmakehlp -f $(CHECKS) "fullwarn"]
!message *** Doing full warnings check
WARNINGS					= -W4
!if [nmakehlp -l -warn:3]
LINKERFLAGS				= $(LINKERFLAGS) -warn:3
!endif
!else
WARNINGS					= -W3
!endif
!if [nmakehlp -f $(CHECKS) "64bit"] && [nmakehlp -c -Wp64]
!message *** Doing 64bit portability warnings
WARNINGS					= $(WARNINGS) -Wp64
!endif
!endif

!if $(PGO) > 1
!if [nmakehlp -l -ltcg:pgoptimize]
LINKERFLAGS				= $(LINKERFLAGS:-ltcg=) -ltcg:pgoptimize
!else
MSG=^
This compiler does not support profile guided optimization.
!error $(MSG)
!endif
!elseif $(PGO) > 0
!if [nmakehlp -l -ltcg:pginstrument]
LINKERFLAGS				= $(LINKERFLAGS:-ltcg=) -ltcg:pginstrument
!else
MSG=^
This compiler does not support profile guided optimization.
!error $(MSG)
!endif
!endif

#----------------------------------------------------------
# Set our defines now armed with our options.
#----------------------------------------------------------

OPTDEFINES	= -DTCL_CFGVAL_ENCODING=$(CFG_ENCODING) -DSTDC_HEADERS

!if $(TCL_MEM_DEBUG)
OPTDEFINES	= $(OPTDEFINES) -DTCL_MEM_DEBUG
!endif
!if $(TCL_COMPILE_DEBUG)
OPTDEFINES	= $(OPTDEFINES) -DTCL_COMPILE_DEBUG -DTCL_COMPILE_STATS
!endif
!if $(TCL_THREADS)
OPTDEFINES	= $(OPTDEFINES) -DTCL_THREADS=1 -DUSE_THREAD_ALLOC=1
!endif
!if $(STATIC_BUILD)
OPTDEFINES	= $(OPTDEFINES) -DSTATIC_BUILD
!endif
!if $(TCL_NO_DEPRECATED)
OPTDEFINES	= $(OPTDEFINES) -DTCL_NO_DEPRECATED
!endif

!if !$(DEBUG)
OPTDEFINES	= $(OPTDEFINES) -DNDEBUG
!if $(OPTIMIZING)
OPTDEFINES	= $(OPTDEFINES) -DTCL_CFG_OPTIMIZED
!endif
!endif
!if $(PROFILE)
OPTDEFINES	= $(OPTDEFINES) -DTCL_CFG_PROFILED
!endif
!if "$(MACHINE)" == "IA64" || "$(MACHINE)" == "AMD64"
OPTDEFINES	= $(OPTDEFINES) -DTCL_CFG_DO64BIT
!endif


#----------------------------------------------------------
# Get common info used when building extensions.
#----------------------------------------------------------

!if "$(PROJECT)" != "tcl"

# If INSTALLDIR set to tcl root dir then reset to the lib dir.
!if exist("$(_INSTALLDIR)\include\tcl.h")
_INSTALLDIR		= $(_INSTALLDIR)\lib
!endif

!if !defined(TCLDIR)
!if exist("$(_INSTALLDIR)\..\include\tcl.h")
TCLINSTALL		= 1
_TCLDIR				= $(_INSTALLDIR)\..
_TCL_H				= $(_INSTALLDIR)\..\include\tcl.h
TCLDIR				= $(_INSTALLDIR)\..
!else
MSG=^
Failed to find tcl.h.  Set the TCLDIR macro.
!error $(MSG)
!endif
!else
_TCLDIR				= $(TCLDIR:/=\)
!if exist("$(_TCLDIR)\include\tcl.h")
TCLINSTALL		= 1
_TCL_H				= $(_TCLDIR)\include\tcl.h
!elseif exist("$(_TCLDIR)\generic\tcl.h")
TCLINSTALL		= 0
_TCL_H				= $(_TCLDIR)\generic\tcl.h
!else
MSG=^
Failed to find tcl.h.  The TCLDIR macro does not appear correct.
!error $(MSG)
!endif
!endif

!if [echo REM = This file is generated from rules.vc > versions.vc]
!endif
!if exist("$(_TCL_H)")
!if [echo TCL_DOTVERSION = \>> versions.vc] \
    && ![trimspace versions.vc versions.ts] \
    && ![$(CPY) versions.ts versions.vc] \
    && [nmakehlp -V "$(_TCL_H)" TCL_VERSION >> versions.vc]
!endif
!endif
!include versions.vc
TCL_VERSION		= $(TCL_DOTVERSION:.=)

!if $(TCLINSTALL)
!if !defined(TCLSH)
TCLSH					= "$(_TCLDIR)\bin\tclsh$(TCL_VERSION)$(SUFX).exe"
!if !exist($(TCLSH)) && $(TCL_THREADS)
TCLSH					= "$(_TCLDIR)\bin\tclsh$(TCL_VERSION)t$(SUFX).exe"
!endif
!endif
!if "$(TCL_PLATFORM)" == "ARM"
!if !defined(VISUALSTUDIOVERSION)
TCL_TOOLSET		= v110
!else
TCL_TOOLSET		= v$(VISUALSTUDIOVERSION:.=)
!endif
TCLSTUBLIB		= "$(_TCLDIR)\lib\$(TCL_PLATFORM)\$(TCL_TOOLSET)\tclstub$(TCL_VERSION).lib"
TCLIMPLIB			= "$(_TCLDIR)\lib\$(TCL_PLATFORM)\$(TCL_TOOLSET)\tcl$(TCL_VERSION)$(SUFX).lib"
!else
TCLSTUBLIB		= "$(_TCLDIR)\lib\$(TCL_PLATFORM)\tclstub$(TCL_VERSION).lib"
TCLIMPLIB			= "$(_TCLDIR)\lib\$(TCL_PLATFORM)\tcl$(TCL_VERSION)$(SUFX).lib"
!endif
TCL_LIBRARY		= $(_TCLDIR)\lib
COFFBASE			= \must\have\tcl\sources\to\build\this\target
TCLTOOLSDIR		= \must\have\tcl\sources\to\build\this\target
TCL_INCLUDES	= -I"$(_TCLDIR)\include"
!else
!if !defined(TCLSH)
TCLSH					= "$(_TCLDIR)\win\$(BUILDDIRTOP)\tclsh$(TCL_VERSION)$(SUFX).exe"
!if !exist($(TCLSH)) && $(TCL_THREADS)
TCLSH					= "$(_TCLDIR)\win\$(BUILDDIRTOP)\tclsh$(TCL_VERSION)t$(SUFX).exe"
!endif
!endif
TCLSTUBLIB		= "$(_TCLDIR)\win\$(BUILDDIRTOP)\tclstub$(TCL_VERSION).lib"
TCLIMPLIB			= "$(_TCLDIR)\win\$(BUILDDIRTOP)\tcl$(TCL_VERSION)$(SUFX).lib"
TCL_LIBRARY		= $(_TCLDIR)\library
COFFBASE			= "$(_TCLDIR)\win\coffbase.txt"
TCLTOOLSDIR		= $(_TCLDIR)\tools
TCL_INCLUDES	= -I"$(_TCLDIR)\generic" -I"$(_TCLDIR)\win"
!endif

!endif

#----------------------------------------------------------
# Optionally check for Tk info for building extensions.
#----------------------------------------------------------

!ifdef PROJECT_REQUIRES_TK
!if "$(PROJECT)" != "tcl" && "$(PROJECT)" != "tk"

!if !defined(TKDIR)
!if exist("$(_INSTALLDIR)\..\include\tk.h")
TKINSTALL			= 1
_TKDIR				= $(_INSTALLDIR)\..
_TK_H					= $(_TKDIR)\include\tk.h
TKDIR					= $(_TKDIR)
!elseif exist("$(_TCLDIR)\include\tk.h")
TKINSTALL			= 1
_TKDIR				= $(_TCLDIR)
_TK_H					= $(_TKDIR)\include\tk.h
TKDIR					= $(_TKDIR)
!endif
!else
_TKDIR				= $(TKDIR:/=\)
!if exist("$(_TKDIR)\include\tk.h")
TKINSTALL			= 1
_TK_H					= $(_TKDIR)\include\tk.h
!elseif exist("$(_TKDIR)\generic\tk.h")
TKINSTALL			= 0
_TK_H					= $(_TKDIR)\generic\tk.h
!else
MSG=^
Failed to find tk.h. The TKDIR macro does not appear correct.
!error $(MSG)
!endif
!endif

!if defined(TKDIR)
TK_DOTVERSION	= 8.4
!if exist("$(_TK_H)")
!if [echo TK_DOTVERSION = \>> versions.vc] \
    && ![trimspace versions.vc versions.ts] \
    && ![$(CPY) versions.ts versions.vc] \
    && [nmakehlp -V "$(_TK_H)" TK_VERSION >> versions.vc]
!endif
!endif
!include versions.vc
TK_VERSION		= $(TK_DOTVERSION:.=)

!if $(TKINSTALL)
WISH					= "$(_TKDIR)\bin\wish$(TK_VERSION)$(SUFX).exe"
!if !exist($(WISH)) && $(TCL_THREADS)
WISH					= "$(_TKDIR)\bin\wish$(TK_VERSION)t$(SUFX).exe"
!endif
TKSTUBLIB			= "$(_TKDIR)\lib\tkstub$(TK_VERSION).lib"
TKIMPLIB			= "$(_TKDIR)\lib\tk$(TK_VERSION)$(SUFX).lib"
TK_INCLUDES		= -I"$(_TKDIR)\include"
!else
WISH					= "$(_TKDIR)\win\$(BUILDDIRTOP)\wish$(TCL_VERSION)$(SUFX).exe"
!if !exist($(WISH)) && $(TCL_THREADS)
WISH					= "$(_TKDIR)\win\$(BUILDDIRTOP)\wish$(TCL_VERSION)t$(SUFX).exe"
!endif
TKSTUBLIB			= "$(_TKDIR)\win\$(BUILDDIRTOP)\tkstub$(TCL_VERSION).lib"
TKIMPLIB			= "$(_TKDIR)\win\$(BUILDDIRTOP)\tk$(TCL_VERSION)$(SUFX).lib"
TK_INCLUDES		= -I"$(_TKDIR)\generic" -I"$(_TKDIR)\win" -I"$(_TKDIR)\xlib"
!endif

!endif
!endif
!endif


#----------------------------------------------------------
# Setup the fully qualified OUT_DIR path as OUT_DIR_PATH
#----------------------------------------------------------
!if [echo OUT_DIR_PATH = \>> versions.vc] \
    && ![trimspace versions.vc versions.ts] \
    && ![$(CPY) versions.ts versions.vc] \
    && [nmakehlp -Q "$(OUT_DIR)" >> versions.vc]
!endif
!include versions.vc


#----------------------------------------------------------
# Display stats being used.
#----------------------------------------------------------

!message *** Intermediate directory will be '$(TMP_DIR)'
!message *** Output directory will be '$(OUT_DIR)'
!message *** Suffix for binaries will be '$(SUFX)'
!message *** Optional defines are '$(OPTDEFINES)'
!message *** Compiler version '$(VCVER)'
!message *** Target machine is '$(MACHINE)'
!message *** Host architecture is '$(NATIVE_ARCH)'
!message *** Compiler options '$(COMPILERFLAGS) $(OPTIMIZATIONS) $(DEBUGFLAGS) $(WARNINGS)'
!message *** Link options '$(LINKERFLAGS)'

!endif
